[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nfrom shiny import render, reactive\nimport pandas as pd\nimport seaborn as sns\nfrom palmerpenguins import load_penguins # This package provides the Palmer Penguins dataset\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = load_penguins()\n\nui.page_opts(title=\"Montoya-Penguin Data\", fillable=True)\n\n# Add sidebar\nwith ui.sidebar(open=\"open\"):\n    \n    ui.h2(\"Sidebar\")\n    \n    # Dropdown input to choose a column\n    ui.input_selectize(\"selected_attribute\", \"Select Attribute\", [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"])\n\n    # Numeric input for Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\",25)\n\n    # Slider input for Seaborn bins\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 0, 100, 25)\n\n    # Checkbox group input to filter species\n    ui.input_checkbox_group(\"selected_species_list\", \"Select Species\", [\"Adelie\", \"Gentoo\", \"Chinstrap\"], selected=[\"Adelie\",\"Gentoo\", \"Chinstrap\"], inline=True)\n\n    ui.hr()\n\n    # Hyperlink\n    ui.a(\"GitHub\", href=\"https://github.com/carlosmontoya3/cintel-02-data\", target=\"_blank\")\n\n# Main content\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Histogram: Species\") # Histogram title\n\n        @render_plotly\n        def penguins_plot1():\n            return px.histogram(\n                filtered_data(), x=input.selected_attribute(), nbins=input.plotly_bin_count()\n            )\n\n    with ui.card():\n        ui.card_header(\"Seaborn Histogram: Species\") # Histogram title\n\n        @render.plot\n        def penguins_plot2():\n            return sns.histplot(\n                data=filtered_data(),\n                x=input.selected_attribute(),\n                bins=input.seaborn_bin_count(),\n            )\n\n\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Scatterplot: Species\") # Scatterplot title\n\n        @render_plotly\n        def plotly_scatterplot():\n            # Create a Plotly scatterplot\n            # Call px.scatter() function\n            # Pass in six arguments\n            return px.scatter(\n                data_frame=filtered_data(),\n                x=\"body_mass_g\",\n                y=\"bill_depth_mm\",\n                color=\"species\")\n\nwith ui.layout_columns():\n\n    @render.data_frame\n    def plot1():\n        return render.DataGrid(filtered_data())\n\n    @render.data_frame\n    def plot2():\n        return render.DataTable(filtered_data())\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    selected_species = input.selected_species_list()\n    return penguins_df[penguins_df[\"species\"].isin(selected_species)]\n", "type": "text"}]